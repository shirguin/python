# Задание №3
# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, number_cells):
        self.number_cells = int(number_cells)

    def __add__(self, other):
        return self.number_cells + other.number_cells

    def __sub__(self, other):
        result = self.number_cells - other.number_cells
        if result > 0:
            return result
        else:
            return 'Нельзя произвести эту операцию, клетка слишком мала.'

    def __mul__(self, other):
        return self.number_cells * other.number_cells

    def __truediv__(self, other):
        return self.number_cells // other.number_cells

    def make_order(self, number_row):
        result = ''
        for i in range(self.number_cells//number_row):
            result += '*' * number_row + '\n'
        result += '*' * (self.number_cells % number_row) + '\n'
        return result


cell1 = Cell(15)
cell2 = Cell(2)
cell3 = Cell(20)
print(cell1+cell2)
print(cell1-cell2)
print(cell1-cell3)
print(cell1*cell2)
print(cell1/cell2)
print(cell1.make_order(6))
